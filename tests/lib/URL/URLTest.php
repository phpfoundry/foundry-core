<?php
require_once("common.php");
require_once("URL/URL.php");

/**
 * Test class for URL.
 * Generated by PHPUnit on 2010-07-29 at 17:07:43.
 */
class URLTest extends PHPUnit_Framework_TestCase {

    /**
     * @var URL
     */
    protected $url_manager_rewrite;
    protected $url_manager_norewrite;

    /**
     * @var string The base URL.
     */
    private $url_base = "http://www.phpfoundry.com";

    private $filename = "index.php";

    private $prefix = "hub/";
    private $prefix_noslash = "hub";

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->url_manager_rewrite   = new URL($this->url_base, true,  $this->prefix_noslash);
        $this->url_manager_norewrite = new URL($this->url_base, false, $this->filename);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @todo Implement testSkip_prefix().
     */
    public function testSkip_prefix() {
        // URL prefix skipping for project
        $this->url_manager_rewrite->skip_prefix("test");

        // expect $url_base/test
        $expected = "{$this->url_base}/test";
        $url = $this->url_manager_rewrite->getPageURL("test");
        $this->assertEquals($expected, $url);
    }

    /**
     * @todo Implement testGetLoginURL().
     */
    public function testGetLoginURL() {
        $expected = "{$this->url_base}/login/r/{$this->prefix}test";
        $url = $this->url_manager_rewrite->getLoginURL("{$this->prefix}test");
        $this->assertEquals($expected, $url);
        $url = $this->url_manager_rewrite->getLoginURL("/login/{$this->prefix}test");
        $this->assertEquals($expected, $url);

        $expected = "{$this->url_base}/login/r/{$this->prefix}test";
        $url = $this->url_manager_rewrite->getLoginURL("{$this->prefix}test");
        $this->assertEquals($expected, $url);
        $url = $this->url_manager_rewrite->getLoginURL("/login/{$this->prefix}test");
        $this->assertEquals($expected, $url);


        $expected = "{$this->filename}?redirect=test";
        $url = $this->url_manager_norewrite->getLoginURL("test");
        $this->assertEquals($expected, $url);
    }

    /**
     * @todo Implement testGetPageURL().
     */
    public function testGetPageURL() {
        // expect $url_base/test
        $expected = "{$this->url_base}/{$this->prefix}test";
        $url = $this->url_manager_rewrite->getPageURL("test");
        $this->assertEquals($expected, $url);

        // expect $url_base?page=test
        $expected = "{$this->filename}?page=test";
        $url = $this->url_manager_norewrite->getPageURL("test");
        $this->assertEquals($expected, $url);
    }

    /**
     * @todo Implement testGetURL().
     */
    public function testGetURL() {
        // expect $url_base/test
        $expected = "{$this->url_base}/{$this->prefix}test";
        $url = $this->url_manager_rewrite->getURL("test");
        $this->assertEquals($expected, $url);
        $expected = "{$this->url_base}/{$this->prefix}test/value";
        $url = $this->url_manager_rewrite->getURL("test", "value");
        $this->assertEquals($expected, $url);
        $expected = "{$this->url_base}/{$this->prefix}test/value/go";
        $url = $this->url_manager_rewrite->getURL("test", "value", "go");
        $this->assertEquals($expected, $url);
        $expected = "{$this->url_base}/{$this->prefix}test/value/go/misc";
        $url = $this->url_manager_rewrite->getURL("test", "value", "go", "misc");
        $this->assertEquals($expected, $url);

        // expect $url_base?page=test
        $expected = "{$this->filename}?page=test";
        $url = $this->url_manager_norewrite->getURL("test");
        $this->assertEquals($expected, $url);
        $expected = "{$this->filename}?page=test&amp;test=value";
        $url = $this->url_manager_norewrite->getURL("test", "value");
        $this->assertEquals($expected, $url);
        $expected = "{$this->filename}?page=test&amp;test=value&amp;action=go";
        $url = $this->url_manager_norewrite->getURL("test", "value", "go");
        $this->assertEquals($expected, $url);
        $expected = "{$this->filename}?page=test&amp;test=value&amp;action=go&amp;data=misc";
        $url = $this->url_manager_norewrite->getURL("test", "value", "go", "misc");
        $this->assertEquals($expected, $url);
    }
}
?>
